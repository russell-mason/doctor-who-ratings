@typeparam T

@if (!string.IsNullOrWhiteSpace(Label))
{
    <label for="@Id">@Label</label>
}

<select id="@Id" @bind="@Value" @bind:after="OnAfterValueChanged">
    @foreach (var (key, value) in Values)
    {
        <option value="@key" selected="@(Value?.Equals(key))">@value</option>
    }
</select>

@code {
    [Parameter]
    public required string Id { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public T? Value { get; set; }

    [Parameter]
    public required IEnumerable<(T, string)> Values { get; set; }

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public EventCallback AfterValueChanged { get; set; }

    private async Task OnAfterValueChanged()
    {
        await ValueChanged.InvokeAsync(Value);
        await AfterValueChanged.InvokeAsync();
    }
}
