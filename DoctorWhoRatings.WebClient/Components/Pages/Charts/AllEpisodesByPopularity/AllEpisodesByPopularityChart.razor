@page "/charts/all-episodes-by-popularity"
@inject IEpisodesDataPointGenerator DataPointGenerator
@inject ITrendDataPointGenerator TrendDataPointGenerator;
@inject IEpisodeContextDrillDown EpisodeContextDrillDown

<PageTitle>@AllEpisodesChartCaptions.Title - @Application.Name</PageTitle>

<ChartHeading Title="@AllEpisodesByPopularityChartCaptions.Title"
              Description="@(AllEpisodesByPopularityChartCaptions.Description + " Only shows like-for-like overnight ratings.")" />

<FullScreenZone>
    <Chart DrillDown="@true">
        <ApexChart @ref="Chart"
                   TItem="EpisodeDataPoint"
                   Title="@AllEpisodesByPopularityChartCaptions.Title"
                   Options="ChartOptions"
                   Height="@("100%")"
                   Width="@("100%")"
                   OnDataPointSelection="OnDataPointSelection">

            <ApexPointTooltip>
                <AllEpisodesByPopularityTooltip DataPoint="@context.DataPoint.Items.First()"
                                                SeriesIndex="@context.SeriesIndex" />
            </ApexPointTooltip>

            <ChildContent>
                <ApexPointSeries TItem="EpisodeDataPoint"
                                 Items="DataPoints"
                                 SeriesType="SeriesType.Line"
                                 XValue="dataPoint => dataPoint.Index"
                                 YValue="dataPoint => dataPoint.OvernightRatings" />

            </ChildContent>
        </ApexChart>
    </Chart>
</FullScreenZone>

<DrillDownTip />

@code {
    private ApexChart<EpisodeDataPoint> Chart { get; set; } = default!;

    private ApexChartOptions<EpisodeDataPoint> ChartOptions { get; } = AllEpisodesByPopularityChartOptions.Defaults;

    private EpisodesDataOptions DataOptions { get; } = new();

    private List<EpisodeDataPoint> DataPoints { get; set; } = default!;

    protected override void OnInitialized()
    {
        DataPoints = DataPointGenerator.Generate(DataOptions)
                                       .OrderByDescending(episode => episode.OvernightRatings)
                                       .Select((dataPoint, index) => { dataPoint.SetIndex(index); return dataPoint; })
                                       .ToList();
    }

    private void OnDataPointSelection(SelectedData<EpisodeDataPoint> selectedData) =>
        InvokeAsync(async () => await EpisodeContextDrillDown.DrillDownAsync(selectedData, selectedData.DataPoint.Items.First().Slug));
}
