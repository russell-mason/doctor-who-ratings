@page "/charts/high-low-by-doctor"
@inject IHighLowEpisodesByDoctorDataGenerator HighLowEpisodesByDoctorDataGenerator

<PageTitle>High/Low by Doctor - Doctor Who Ratings</PageTitle>

<ChartHeading Title="@HighLowEpisodesByDoctorData.Title"
              Description="@HighLowEpisodesByDoctorData.Description" />

<Chart>
    <ApexChart @ref="Chart"
               TItem="HighLowEpisodesByDoctorDataPoint"
               Title="@HighLowEpisodesByDoctorData.YAxisTitle"
               Options="ChartOptions"
               Height="@("100%")"
               Width="@("100%")">
            
        <ApexPointTooltip>
            <HighLowEpisodesByDoctorTooltip DataPoint="@context.DataPoint.Items.First()"
                                            SeriesIndex="@context.SeriesIndex"
                                            DataOptions="DataOptions" />
        </ApexPointTooltip>
        
        <ChildContent>
            <ApexPointSeries TItem="HighLowEpisodesByDoctorDataPoint"
                             Items="DataSource.DataPoints"
                             Name="@HighLowEpisodesByDoctorData.SeriesTitles[0]"
                             Group="High"
                             SeriesType="SeriesType.Bar"
                             XValue="dp => dp.Actor"
                             YValue="dp => dp.HighEpisodeDataPoint.CalculatedOvernightRatings ?? 0"/>

            <ApexPointSeries TItem="HighLowEpisodesByDoctorDataPoint"
                             Items="DataSource.DataPoints"
                             Name="@HighLowEpisodesByDoctorData.SeriesTitles[1]"
                             Group="High"
                             SeriesType="SeriesType.Bar"
                             XValue="dp => dp.Actor"
                             YValue="dp => dp.HighEpisodeDataPoint.CalculatedConsolidatedExcessRatings ?? 0" />

            <ApexPointSeries TItem="HighLowEpisodesByDoctorDataPoint"
                             Items="DataSource.DataPoints"
                             Name="@HighLowEpisodesByDoctorData.SeriesTitles[2]"
                             Group="High"
                             SeriesType="SeriesType.Bar"
                             XValue="dp => dp.Actor"
                             YValue="dp => dp.HighEpisodeDataPoint.CalculatedExtendedExcessRatings ?? 0" />

            <ApexPointSeries TItem="HighLowEpisodesByDoctorDataPoint"
                             Items="DataSource.DataPoints"
                             Name="@HighLowEpisodesByDoctorData.SeriesTitles[3]"
                             Group="Low"
                             SeriesType="SeriesType.Bar"
                             XValue="dp => dp.Actor"
                             YValue="dp => dp.LowEpisodeDataPoint.CalculatedOvernightRatings ?? 0"/>

            <ApexPointSeries TItem="HighLowEpisodesByDoctorDataPoint"
                             Items="DataSource.DataPoints"
                             Name="@HighLowEpisodesByDoctorData.SeriesTitles[4]"
                             Group="Low"
                             SeriesType="SeriesType.Bar"
                             XValue="dp => dp.Actor"
                             YValue="dp => dp.LowEpisodeDataPoint.CalculatedConsolidatedExcessRatings ?? 0" />

            <ApexPointSeries TItem="HighLowEpisodesByDoctorDataPoint"
                             Items="DataSource.DataPoints"
                             Name="@HighLowEpisodesByDoctorData.SeriesTitles[5]"
                             Group="Low"
                             SeriesType="SeriesType.Bar"
                             XValue="dp => dp.Actor"
                             YValue="dp => dp.LowEpisodeDataPoint.CalculatedExtendedExcessRatings ?? 0" />
        </ChildContent>
    </ApexChart>
</Chart>

<ChartOptions>
    <ChartOptionsSet>
        <span>Calculate using</span>

        <input class="radio" id="overnight" type="radio" name="ratingsOption"
               value="@HighLowEpisodesCalculationMethod.Overnight"
               checked="@(DataOptions.CalculationMethod == HighLowEpisodesCalculationMethod.Overnight)"
               @onchange="() => CalculationMethodChanged(HighLowEpisodesCalculationMethod.Overnight)" />

        <label for="overnight">@HighLowEpisodesCalculationMethod.Overnight.ToString()</label>

        <input class="radio" id="consolidated" type="radio" name="ratingsOption"
               value="@HighLowEpisodesCalculationMethod.Consolidated"
               checked="@(DataOptions.CalculationMethod == HighLowEpisodesCalculationMethod.Consolidated)"
               @onchange="() => CalculationMethodChanged(HighLowEpisodesCalculationMethod.Consolidated)" />

        <label for="consolidated">@HighLowEpisodesCalculationMethod.Consolidated.ToString()</label>
        
        <input class="radio" id="extended" type="radio" name="ratingsOption"
               value="@HighLowEpisodesCalculationMethod.Extended"
               checked="@(DataOptions.CalculationMethod == HighLowEpisodesCalculationMethod.Extended)"
               @onchange="() => CalculationMethodChanged(HighLowEpisodesCalculationMethod.Extended)" />

        <label for="extended">@HighLowEpisodesCalculationMethod.Extended.ToString()</label>
    </ChartOptionsSet>

    <ChartOptionsSet>
        <input class="checkbox" id="population" type="checkbox" name="adjustForPopulation"
               checked="@(DataOptions.AdjustForCurrentPopulation)"
               @onchange="(e) => AdjustForPopulationChanged(Convert.ToBoolean(e.Value))"/>

        <label for="population">Adjust relative to current population</label>
    </ChartOptionsSet>
</ChartOptions>

@code {
    private ApexChart<HighLowEpisodesByDoctorDataPoint> Chart { get; set; } = default!;

    private ApexChartOptions<HighLowEpisodesByDoctorDataPoint> ChartOptions { get; } = CreateChartOptions();

    private HighLowEpisodesByDoctorData DataSource { get; set; } = null!;

    private HighLowEpisodesByDoctorDataOptions DataOptions { get; } = new();

    protected override void OnInitialized() => DataSource = HighLowEpisodesByDoctorDataGenerator.Generate(DataOptions);

    private async Task Refresh()
    {
        DataSource = HighLowEpisodesByDoctorDataGenerator.Generate(DataOptions);

        StateHasChanged();

        await Chart.UpdateSeriesAsync();
    }

    private async Task AdjustForPopulationChanged(bool adjust)
    {
        DataOptions.AdjustForCurrentPopulation = adjust;

        await Refresh();
    }

    private async Task CalculationMethodChanged(HighLowEpisodesCalculationMethod calculationMethod)
    {
        DataOptions.CalculationMethod = calculationMethod;

        await Refresh();
    }

    private static ApexChartOptions<HighLowEpisodesByDoctorDataPoint> CreateChartOptions() =>
        new()
        {
            PlotOptions = new PlotOptions
            {
                Bar = new PlotOptionsBar
                {
                    ColumnWidth = "90%"
                }
            },
            Yaxis =
            [
                new YAxis
                {
                    Labels = new YAxisLabels
                    {
                        Formatter = "function(value) { return value.toFixed(2); }"
                    }
                }
            ],
            Chart =
            {
                Stacked = true
            }
        };
}
