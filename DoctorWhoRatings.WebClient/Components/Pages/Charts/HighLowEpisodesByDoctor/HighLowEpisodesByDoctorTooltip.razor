<ChartTooltip>
    <ChartTooltipEpisodeSetion Actor="@DataPoint.Actor"
                               EpisodeCount="@DataPoint.EpisodeCount"
                               StoryTitle="@HighLowDataPoint.StoryTitle"
                               PartTitle="@HighLowDataPoint.StoryPartTitle" 
                               HasHighestRating="@HasHighestRating"
                               HasLowestRating="@HasLowestRating" />

    <ChartTooltipBreak />
    
    <ChartTooltipRatingsSection TargetRatings="@TargetExcessRatings"
                                OvernightRatings="@HighLowDataPoint.OvernightRatings"
                                ConsolidatedRatings="@HighLowDataPoint.ConsolidatedRatings"
                                ExtendedRatings="@HighLowDataPoint.ExtendedRatings" />
</ChartTooltip>

<ChartSecondaryTooltip>
    <ChartTooltipRatingsSection Title="Population adjusted"
                                TargetRatings="@TargetPopulationAdjustedExcessRatings"
                                OvernightRatings="@HighLowDataPoint.PopulationAdjustedOvernightRatings"
                                ConsolidatedRatings="@HighLowDataPoint.PopulationAdjustedConsolidatedRatings"
                                ExtendedRatings="@HighLowDataPoint.PopulationAdjustedExtendedRatings" />
</ChartSecondaryTooltip>

@code {
    private const int ConsolidatedSeriesIndex = 1;
    private const int ExtendedSeriesIndex = 2;
    private const int SeriesPerDataPoint = 3;

    [Parameter]
    public required HighLowEpisodesByDoctorDataPoint DataPoint { get; set; }

    [Parameter]
    public required int SeriesIndex { get; set; }

    [Parameter]
    public required HighLowEpisodesByDoctorDataOptions DataOptions { get; set; }

    private bool HasHighestRating => SeriesIndex / SeriesPerDataPoint == 0;

    private bool HasLowestRating => !HasHighestRating;

    private bool IsConsolidatedExcess => SeriesIndex % SeriesPerDataPoint == 1;

    private bool IsExtendedExcess => SeriesIndex % SeriesPerDataPoint == 2;

    private HighLowEpisodeByDoctorDataPoint HighLowDataPoint => HasHighestRating
        ? DataPoint.HighEpisodeDataPoint 
        : DataPoint.LowEpisodeDataPoint;

    private decimal? TargetExcessRatings => IsConsolidatedExcess
        ? HighLowDataPoint.ConsolidatedExcessRatings
        : IsExtendedExcess 
            ? HighLowDataPoint.ExtendedExcessRatings 
            : null;

    private decimal? TargetPopulationAdjustedExcessRatings => IsConsolidatedExcess
        ? HighLowDataPoint.PopulationAdjustedConsolidatedExcessRatings
        : IsExtendedExcess 
            ? HighLowDataPoint.PopulationAdjustedExtendedExcessRatings
            : null;
}
