@page "/charts/average-by-doctor"
@inject IAverageByDoctorDataGenerator AverageByDoctorDataGenerator

<PageTitle>Average by Doctor - Doctor Who Ratings</PageTitle>

<ChartHeading Title="@AverageByDoctorData.Title"
              Description="@AverageByDoctorData.Description" />

<Chart>
    <ApexChart @ref="Chart"
               TItem="AverageByDoctorDataPoint"
               Title="@AverageByDoctorData.YAxisTitle"
               Options="ChartOptions"
               Height="@("100%")"
               Width="@("100%")">

        <ApexPointTooltip>
            <AverageByDoctorTooltip DataPoint="@context.DataPoint.Items.First()"
                                    SeriesIndex="@context.SeriesIndex"
                                    DataOptions="DataOptions" />
        </ApexPointTooltip>

        <ChildContent>
            <ApexPointSeries TItem="AverageByDoctorDataPoint"
                             Items="DataSource.DataPoints"
                             Name="@AverageByDoctorData.SeriesTitles[0]"
                             SeriesType="SeriesType.Bar"
                             XValue="dp => dp.Actor"
                             YValue="dp => DataOptions.AdjustForCurrentPopulation ? dp.CalculatedPopulationAdjustedOvernightRatings : dp.CalculatedOvernightRatings" />

            <ApexPointSeries TItem="AverageByDoctorDataPoint"
                             Items="DataSource.DataPoints"
                             Name="@AverageByDoctorData.SeriesTitles[1]"
                             SeriesType="SeriesType.Bar"
                             XValue="dp => dp.Actor"
                             YValue="dp => DataOptions.AdjustForCurrentPopulation ? dp.CalculatedPopulationAdjustedConsolidatedExcessRatings : dp.CalculatedConsolidatedExcessRatings" />

            <ApexPointSeries TItem="AverageByDoctorDataPoint"
                             Items="DataSource.DataPoints"
                             Name="@AverageByDoctorData.SeriesTitles[2]"
                             SeriesType="SeriesType.Bar"
                             XValue="dp => dp.Actor"
                             YValue="dp => DataOptions.AdjustForCurrentPopulation ? dp.CalculatedPopulationAdjustedExtendedExcessRatings : dp.CalculatedExtendedExcessRatings" />
        </ChildContent>
    </ApexChart>
</Chart>

<ChartOptions>
    <ChartOptionsSet>
        <span>Calculate using</span>

        <input class="radio" id="average" type="radio" name="midpointOption"
               value="@AverageByDoctorCalculationMethod.Mean"
               checked="@(DataOptions.CalculationMethod == AverageByDoctorCalculationMethod.Mean)"
               @onchange="() => CalculationMethodChanged(AverageByDoctorCalculationMethod.Mean)"/>

        <label for="average">@AverageByDoctorCalculationMethod.Mean.ToString()</label>

        <input class="radio" id="median" type="radio" name="midpointOption"
               value="@AverageByDoctorCalculationMethod.Median"
               checked="@(DataOptions.CalculationMethod == AverageByDoctorCalculationMethod.Median)"
               @onchange="() => CalculationMethodChanged(AverageByDoctorCalculationMethod.Median)"/>

        <label for="median">@AverageByDoctorCalculationMethod.Median.ToString()</label>
    </ChartOptionsSet>

    <ChartOptionsSet>
        <input class="checkbox" id="population" type="checkbox" name="adjustForPopulation"
               checked="@(DataOptions.AdjustForCurrentPopulation)"
               @onchange="(e) => AdjustForPopulationChanged(Convert.ToBoolean(e.Value))"/>

        <label for="population">Adjust relative to current population</label>
    </ChartOptionsSet>
</ChartOptions>

@code {
    private ApexChart<AverageByDoctorDataPoint> Chart { get; set; } = default!;

    private ApexChartOptions<AverageByDoctorDataPoint> ChartOptions { get; } = CreateChartOptions();

    private AverageByDoctorData DataSource { get; set; } = null!;

    private AverageByDoctorDataOptions DataOptions { get; } = new();

    protected override void OnInitialized() => DataSource = AverageByDoctorDataGenerator.Generate(DataOptions);

    private async Task Refresh()
    {
        DataSource = AverageByDoctorDataGenerator.Generate(DataOptions);

        StateHasChanged();

        await Chart.UpdateSeriesAsync();
    }

    private async Task AdjustForPopulationChanged(bool adjust)
    {
        DataOptions.AdjustForCurrentPopulation = adjust;

        await Refresh();
    }

    private async Task CalculationMethodChanged(AverageByDoctorCalculationMethod calculationMethod)
    {
        DataOptions.CalculationMethod = calculationMethod;

        await Refresh();
    }

    private static ApexChartOptions<AverageByDoctorDataPoint> CreateChartOptions() =>
        new()
        {
            PlotOptions = new PlotOptions
            {
                Bar = new PlotOptionsBar
                {
                    ColumnWidth = "90%"
                }
            },
            Yaxis =
            [
                new YAxis
                {
                    Labels = new YAxisLabels
                    {
                        Formatter = "function(value) { return value.toFixed(2); }"
                    }
                }
            ],
            Chart =
            {
                Stacked = true
            }
        };
}
