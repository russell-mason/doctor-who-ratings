@page "/charts/average-by-doctor"
@inject IAverageByDoctorDataGenerator AverageByDoctorDataGenerator

<PageTitle>@AverageByDoctorData.Title - @Application.Name</PageTitle>

<ChartHeading Title="@AverageByDoctorData.Title"
              Description="@AverageByDoctorData.Description" />

<Chart>
    <ApexChart @ref="Chart"
               TItem="AverageByDoctorDataPoint"
               Title="@AverageByDoctorData.YAxisTitle"
               Options="ChartOptions"
               Height="@("100%")"
               Width="@("100%")">

        <ApexPointTooltip>
            <AverageByDoctorTooltip DataPoint="@context.DataPoint.Items.First()"
                                    SeriesIndex="@context.SeriesIndex"
                                    DataOptions="DataOptions" />
        </ApexPointTooltip>

        <ChildContent>
            <ApexPointSeries TItem="AverageByDoctorDataPoint"
                             Items="DataSource.DataPoints"
                             Name="@AverageByDoctorData.SeriesTitles[0]"
                             SeriesType="SeriesType.Bar"
                             XValue="dataPoint => dataPoint.Actor"
                             YValue="dataPoint => DataOptions.AdjustForCurrentPopulation ? dataPoint.CalculatedPopulationAdjustedOvernightRatings : dataPoint.CalculatedOvernightRatings" />

            <ApexPointSeries TItem="AverageByDoctorDataPoint"
                             Items="DataSource.DataPoints"
                             Name="@AverageByDoctorData.SeriesTitles[1]"
                             SeriesType="SeriesType.Bar"
                             XValue="dataPoint => dataPoint.Actor"
                             YValue="dataPoint => DataOptions.AdjustForCurrentPopulation ? dataPoint.CalculatedPopulationAdjustedConsolidatedExcessRatings : dataPoint.CalculatedConsolidatedExcessRatings" />

            <ApexPointSeries TItem="AverageByDoctorDataPoint"
                             Items="DataSource.DataPoints"
                             Name="@AverageByDoctorData.SeriesTitles[2]"
                             SeriesType="SeriesType.Bar"
                             XValue="dataPoint => dataPoint.Actor"
                             YValue="dataPoint => DataOptions.AdjustForCurrentPopulation ? dataPoint.CalculatedPopulationAdjustedExtendedExcessRatings : dataPoint.CalculatedExtendedExcessRatings" />
        </ChildContent>
    </ApexChart>
</Chart>

<ChartOptions>
    <ChartOptionsGroup>
        <ChartOptionsText Label="Calculate using" />

        <ChartOptionsRadio @bind-Value="DataOptions.CalculationMethod"
                           Id="mean" Group="midpointOption"
                           CheckedValue="@AverageByDoctorCalculationMethod.Mean"
                           AfterValueChanged="AfterOptionChanged">
        </ChartOptionsRadio>

        <ChartOptionsRadio @bind-Value="DataOptions.CalculationMethod"
                           Id="median" Group="midpointOption"
                           CheckedValue="@AverageByDoctorCalculationMethod.Median"
                           AfterValueChanged="AfterOptionChanged">
        </ChartOptionsRadio>
    </ChartOptionsGroup>
    
    <ChartOptionsGroup>
        <ChartOptionsCheckbox @bind-Value="DataOptions.AdjustForCurrentPopulation"
                              Id="population" Label="Adjust relative to current population"
                              AfterValueChanged="AfterOptionChanged">
        </ChartOptionsCheckbox>
    </ChartOptionsGroup>
</ChartOptions>

@code {
    private ApexChart<AverageByDoctorDataPoint> Chart { get; set; } = default!;

    private ApexChartOptions<AverageByDoctorDataPoint> ChartOptions { get; } = AverageByDoctorChartOptions.Defaults; 

    private AverageByDoctorData DataSource { get; set; } = default!;

    private AverageByDoctorDataOptions DataOptions { get; } = new();

    protected override void OnInitialized() => DataSource = AverageByDoctorDataGenerator.Generate(DataOptions);

    private async Task AfterOptionChanged()
    {
        DataSource = AverageByDoctorDataGenerator.Generate(DataOptions);

        StateHasChanged();

        await Chart.UpdateSeriesAsync();
    }
}
