@page "/charts/specials-only"
@inject IEpisodesDataPointGenerator DataPointGenerator
@inject IEpisodeContextDrillDown EpisodeContextDrillDown

<PageTitle>@SpecialsOnlyChartCaptions.Title - @Application.Name</PageTitle>

<ChartHeading Title="@SpecialsOnlyChartCaptions.Title"
              Description="@SpecialsOnlyChartCaptions.Description" />

<Chart DrillDown="@true">
    <ApexChart @ref="Chart"
               TItem="EpisodeDataPoint"
               Title="@SpecialsOnlyChartCaptions.YAxisTitle"
               Options="ChartOptions"
               Height="@("100%")"
               Width="@("100%")"
               OnDataPointSelection="OnDataPointSelection">

        <ApexPointTooltip>
            <SpecialsOnlyTooltip DataPoint="@context.DataPoint.Items.First()"
                                 SeriesIndex="@context.SeriesIndex"
                                 ShowPopulationAdjusted="@DataOptions.AdjustForCurrentPopulation" />
        </ApexPointTooltip>

        <ChildContent>
            <ApexPointSeries TItem="EpisodeDataPoint"
                             Items="DataPoints"
                             Name="@SpecialsOnlyChartCaptions.SeriesTitles[0]"
                             SeriesType="SeriesType.Bar"
                             XValue="dataPoint => dataPoint.OriginalAirDate"
                             YValue="dataPoint => DataOptions.AdjustForCurrentPopulation ? dataPoint.PopulationAdjustedOvernightRatings : dataPoint.OvernightRatings" />

            <ApexPointSeries TItem="EpisodeDataPoint"
                             Items="DataPoints"
                             Name="@SpecialsOnlyChartCaptions.SeriesTitles[1]"
                             SeriesType="SeriesType.Bar"
                             XValue="dataPoint => dataPoint.OriginalAirDate"
                             YValue="dataPoint => DataOptions.AdjustForCurrentPopulation ? dataPoint.PopulationAdjustedConsolidatedExcessRatings : dataPoint.ConsolidatedExcessRatings" />

            <ApexPointSeries TItem="EpisodeDataPoint"
                             Items="DataPoints"
                             Name="@SpecialsOnlyChartCaptions.SeriesTitles[2]"
                             SeriesType="SeriesType.Bar"
                             XValue="dataPoint => dataPoint.OriginalAirDate"
                             YValue="dataPoint => DataOptions.AdjustForCurrentPopulation ? dataPoint.PopulationAdjustedExtendedExcessRatings : dataPoint.ExtendedExcessRatings" />
        </ChildContent>
    </ApexChart>
</Chart>

<ChartOptions>
    <ChartOptionsGroup>
        <ChartOptionsCheckbox @bind-Value="DataOptions.AdjustForCurrentPopulation"
                              Id="population" Label="Adjust relative to current population"
                              AfterValueChanged="AfterOptionChanged">
        </ChartOptionsCheckbox>
    </ChartOptionsGroup>

    <ChartOptionsGroup>
        <ChartOptionsCheckbox @bind-Value="DataOptions.IncludeChristmas"
                              Id="includeChristmas" Label="Include Christmas"
                              AfterValueChanged="AfterOptionChanged">
        </ChartOptionsCheckbox>

        <ChartOptionsCheckbox @bind-Value="DataOptions.IncludeNewYear"
                              Id="includeNewYear" Label="Include New Year"
                              AfterValueChanged="AfterOptionChanged">
        </ChartOptionsCheckbox>

        <ChartOptionsCheckbox @bind-Value="DataOptions.IncludeNonSeasonal"
                              Id="includeNonSeasonal" Label="Include non-seasonal"
                              AfterValueChanged="AfterOptionChanged">
        </ChartOptionsCheckbox>
    </ChartOptionsGroup>
</ChartOptions>

<DrillDownTip />

@code {
    private ApexChart<EpisodeDataPoint> Chart { get; set; } = default!;

    private ApexChartOptions<EpisodeDataPoint> ChartOptions { get; set; } = SpecialsOnlyChartOptions.Defaults;

    private SpecialsOnlyDataOptions DataOptions { get; } = new()
        {
            AdjustForCurrentPopulation = false,
            IncludeChristmas = true,
            IncludeNewYear = true,
            IncludeNonSeasonal = true
        };

    private EpisodesDataOptions EpisodeDataOptions => new()  // Rematch on access
        {
            EpisodeFormatIdFilter = EpisodeFormats.Special, // Specials only
            CustomFilter = MatchesDateFilter
        };

    private List<EpisodeDataPoint> DataPoints { get; set; } = default!;

    protected override void OnInitialized()
    {
        DataPoints = DataPointGenerator.Generate(EpisodeDataOptions);
    }

    private async Task AfterOptionChanged()
    {
        DataPoints = DataPointGenerator.Generate(EpisodeDataOptions);

        await Chart.UpdateSeriesAsync();

        await EpisodeContextDrillDown.DeselectAsync(Chart);
    }

    private void OnDataPointSelection(SelectedData<EpisodeDataPoint> selectedData) =>
        InvokeAsync(async () => await EpisodeContextDrillDown.DrillDownAsync(selectedData, selectedData.DataPoint.Items.First().Slug));

    private bool MatchesDateFilter(Episode episode)
    {
        return DataOptions.IncludeChristmas && episode.OriginalAirDate.IsChristmas() ||
               DataOptions.IncludeNewYear && episode.OriginalAirDate.IsNewYear() ||
               DataOptions.IncludeNonSeasonal && !episode.OriginalAirDate.IsSeasonal();
    }
}
