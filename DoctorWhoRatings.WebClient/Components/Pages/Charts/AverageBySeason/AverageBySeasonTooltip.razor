<ChartTooltip>
    <ChartTooltipEpisodeSetion Actor="@DataPoint.Actor"
                               EpisodeCount="@DataPoint.EpisodeCount"
                               EpisodeCountLocation="@EpisodeCountLocation.AfterStoryTitle"
                               SeasonFormatDescription="@DataPoint.SeasonFormatDescription"
                               Season="@DataPoint.Season"
                               OriginalAirDate="@DataPoint.OriginalAirDate" />

    <ChartTooltipBreak />

    <ChartTooltipIconSection IconUrl="images/calculator.svg"
                             IconAlt="Calculation method"
                             Title="@DataOptions.CalculationMethod.ToString()" />
    <ChartTooltipBreak />

    <ChartTooltipRatingsSection TargetRatings="@TargetExcessRatings"
                                OvernightRatings="@DataPoint.CalculatedOvernightRatings"
                                ConsolidatedRatings="@DataPoint.CalculatedConsolidatedRatings"
                                ExtendedRatings="@DataPoint.CalculatedExtendedRatings" />
</ChartTooltip>

@if (DataOptions.AdjustForCurrentPopulation)
{
    <ChartSecondaryTooltip>
        <ChartTooltipRatingsSection Title="Population adjusted"
                                    TargetRatings="@TargetPopulationAdjustedExcessRatings"
                                    OvernightRatings="@DataPoint.CalculatedPopulationAdjustedOvernightRatings"
                                    ConsolidatedRatings="@DataPoint.CalculatedPopulationAdjustedConsolidatedRatings"
                                    ExtendedRatings="@DataPoint.CalculatedPopulationAdjustedExtendedRatings" />
    </ChartSecondaryTooltip>
}

@code {
    private const int ConsolidatedSeriesIndex = 1;
    private const int ExtendedSeriesIndex = 2;

    [Parameter]
    public required AverageBySeasonDataPoint DataPoint { get; set; }

    [Parameter]
    public required int SeriesIndex { get; set; }

    [Parameter]
    public required AverageBySeasonDataOptions DataOptions { get; set; }

    private decimal? TargetExcessRatings => SeriesIndex switch
    {
        ConsolidatedSeriesIndex => DataPoint.CalculatedConsolidatedExcessRatings,
        ExtendedSeriesIndex => DataPoint.CalculatedExtendedExcessRatings,
        _ => null
    };

    private decimal? TargetPopulationAdjustedExcessRatings => SeriesIndex switch
    {
        ConsolidatedSeriesIndex => DataPoint.CalculatedPopulationAdjustedConsolidatedExcessRatings,
        ExtendedSeriesIndex => DataPoint.CalculatedPopulationAdjustedExtendedExcessRatings,
        _ => null
    };
}
