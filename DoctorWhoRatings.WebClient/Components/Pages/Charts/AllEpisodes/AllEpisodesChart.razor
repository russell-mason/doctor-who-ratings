@page "/charts/all-episodes"
@inject IAllEpisodesDataGenerator AllEpisodesDataGenerator

<PageTitle>All Episodes - Doctor Who Ratings</PageTitle>

<NavBar />

<div class="page-container">
    <div class="title-block">
        <div class="title">@AllEpisodesData.Title</div>
        <div>@AllEpisodesData.Description</div>
    </div>

    <div class="chart-container ">
        <ApexChart @ref="Chart" 
                   TItem="AllEpisodesDataPoint"
                   Title="@AllEpisodesData.YAxisTitle"
                   Options="Options"
                   Height="@("100%")"
                   Width="@("100%")">

            <ApexPointTooltip>
                <AllEpisodeTooltip DataPoint="@context.DataPoint.Items.First()"
                                   SeriesIndex="@context.SeriesIndex" />
            </ApexPointTooltip>

            <ChildContent>
                <ApexPointSeries TItem="AllEpisodesDataPoint"
                                 Items="DataSource.DataPoints"
                                 Name="@AllEpisodesData.SeriesTitles[0]"
                                 SeriesType="SeriesType.Bar"
                                 XValue="dp => dp.Id"
                                 YValue="dp => DataOptions.AdjustForCurrentPopulation ? dp.PopulationAdjustedOvernightRatings : dp.OvernightRatings" />
                
                <ApexPointSeries TItem="AllEpisodesDataPoint"
                                 Items="DataSource.DataPoints"
                                 Name="@AllEpisodesData.SeriesTitles[1]"
                                 SeriesType="SeriesType.Bar"
                                 XValue="dp => dp.Id"
                                 YValue="dp => DataOptions.AdjustForCurrentPopulation ? dp.PopulationAdjustedConsolidatedExcessRatings: dp.ConsolidatedExcessRatings" />
                
                <ApexPointSeries TItem="AllEpisodesDataPoint"
                                 Items="DataSource.DataPoints"
                                 Name="@AllEpisodesData.SeriesTitles[2]"
                                 SeriesType="SeriesType.Bar"
                                 XValue="dp => dp.Id"
                                 YValue="dp => DataOptions.AdjustForCurrentPopulation ? dp.PopulationAdjustedExtendedExcessRatings : dp.ExtendedExcessRatings" />
            </ChildContent>
        </ApexChart>
    </div>
    
    <div class="options-container">
        <div class="options">
            <input class="checkbox" id="population" type="checkbox" name="adjustForPopulation"
                   checked="@(DataOptions.AdjustForCurrentPopulation)"
                   @onchange="(e) => AdjustForPopulationChanged(Convert.ToBoolean(e.Value))" />

            <label for="population">Adjust relative to current population</label>
        </div>
    </div>
</div>

@code {
    private ApexChart<AllEpisodesDataPoint> Chart { get; set; } = default!;

    private ApexChartOptions<AllEpisodesDataPoint> Options { get; } = CreateChartOptions();

    private AllEpisodesData DataSource { get; set; } = default!;

    private AllEpisodesDataOptions DataOptions { get; } = new();
    
    protected override void OnInitialized()
    {
        DataSource = AllEpisodesDataGenerator.Generate();
    }

    private async Task Refresh()
    {
        DataSource = AllEpisodesDataGenerator.Generate();

        StateHasChanged();

        await Chart.UpdateSeriesAsync();
    }

    private async Task AdjustForPopulationChanged(bool adjust)
    {
        DataOptions.AdjustForCurrentPopulation = adjust;

        await Refresh();
    }

    private static ApexChartOptions<AllEpisodesDataPoint> CreateChartOptions()
    {
        ApexChartOptions<AllEpisodesDataPoint> chartOptions = new()
            {
                PlotOptions = new PlotOptions
                {
                    Bar = new PlotOptionsBar
                    {
                        ColumnWidth = "90%"
                    }
                },
                Xaxis = new XAxis
                {
                    Title = new AxisTitle
                    {
                        Text = AllEpisodesData.XAxisTitle,
                        OffsetY = -6
                    },
                    Labels = new XAxisLabels
                    {
                        Show = false
                    },
                    TickPlacement = TickPlacement.On
                },
                Yaxis =
                [
                    new YAxis
                    {
                        Labels = new YAxisLabels
                        {
                            Formatter = "function(value) { return value.toFixed(2); }"
                        }
                    }
                ],
                Chart =
                {
                    Stacked = true
                }
            };

        return chartOptions;
    }
}
